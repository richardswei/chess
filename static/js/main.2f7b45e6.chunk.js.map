{"version":3,"sources":["chessHelpers.js","Chess.js","App.js","serviceWorker.js","index.js"],"names":["groupByRank","moveArray","reduce","acc","obj","rank","getValueAtSquare","file","board","error","getKingSpecialMoves","boardSetup","currentPiece","pieceType","hasMoved","emptyFilesRequired","0","7","kingSpecialMoves","threatenedSquares","getThreatsAgainstPlayer","pieceColor","forEach","rookFile","map","emptyFile","a","b","castleDestination","push","getPawnSpecialMoves","stateObj","validMoves","negativeIfWhite","eligibleCapture","pawnSpecialMoves","diagonalCapture","move","filter","coord","colorAndPiece","enPassantAvailableAt","vulnerablePawnPosition","enPassantMoves","eligible","getEnPassantThreats","color","threatenedSpaces","piece","concat","eligibleMovesList","updateBoardWithMoves","newStateObject","copyBoardSetup","JSON","parse","stringify","movesetList","getEligibleStandardMoves","currentPieceType","squareRank","squareFile","currentPosition","pieceAttributesByType","eligibleUnitMoves","unitMoves","deltaCoord","occupant","unlimitedRange","length","extendForUnlimitedRange","deltaMovement","dx","dy","newCoord","coordinateIsOffBoard","occupantColor","flat","searchForChecks","kingColor","kingPosition","threatenedCoordinates","manageKingMove","movingPiece","target","blackKingPosition","whiteKingPosition","manageSpecialMoves","origin","updateBoard1","manageEnPassant","spacesMoved","kingRank","Math","abs","console","log","manageCastle","managePromotion","manageEnPassantState","chess_unicode","white","king","queen","rook","bishop","knight","pawn","black","pieceAttributes","defaultSetupWhite","1","2","3","4","5","6","Chess","props","handleNewGame","bind","handleLoadGame","handleSquareClick","state","chessHelpers","highlightedSquares","hotSquare","playerTurn","check","jumbotronMessage","boardWithMoves","this","setState","executeMove","coordinate","square","targetSquare","currentPlayer","originRank","originFile","valueOrigin","targetRank","targetFile","opponent","boardSetupUpdated","playerIsChecked","alert","toUpperCase","opponentKingPosition","legalMovesExist","originSquare","checkedKingExists","className","Component","Board","renderSquare","squareId","key","highlighted","symbol","getPieceSymbol","currentChesspiece","boardRows","Array","fill","_","i","boardCols","row","column","Square","onClick","Jumbotron","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f7b45e6.chunk.js","sourcesContent":["\nexport function groupByRank(moveArray) {\n    return moveArray.reduce(function (acc, obj) {\n      let rank = obj[1];\n      if (!acc[rank]) {\n        acc[rank] = {};\n      }\n      acc[rank][obj[0]] = true;\n      return acc;\n    }, {});\n  }\n\nexport function getValueAtSquare(rank, file, board) {\n  try {\n    return board[rank][file]\n  } \n  catch(error) {\n    return null;\n  }\n}\n\nexport function getEnPassantThreats(rank, file) {\n    if (rank===null || file===null) return {};\n    const eligible = [];\n    if (file-1>=0) {\n      eligible.push([file-1, rank]);\n    }\n    if (file+1<8) {\n      eligible.push([file+1, rank]);\n    }\n    return groupByRank(eligible)\n  }\n\nexport function getKingSpecialMoves(rank, file, boardSetup) {\n  const currentPiece = boardSetup[rank][file];\n  if (currentPiece.pieceType==='king' && !currentPiece.hasMoved) {\n    const emptyFilesRequired = {\n      0: [1,2,3],\n      7: [5,6]\n    };\n    const kingSpecialMoves = [];\n    const defaultRookFiles = [0, 7];\n    const threatenedSquares = getThreatsAgainstPlayer(boardSetup, currentPiece.pieceColor);\n\n    // cannot castle while in check\n    if (getValueAtSquare(rank, file, threatenedSquares)) return [];\n\n    // check if spaces are empty or in check\n    defaultRookFiles.forEach((rookFile) => {\n      const potentialRook = getValueAtSquare(rank, rookFile, boardSetup);\n\n      // check if the piece hasMoved\n      if (!potentialRook.hasMoved) {\n        const castleIneligible = emptyFilesRequired[rookFile].map((emptyFile) => {\n          const square = getValueAtSquare(rank, emptyFile, boardSetup);\n          if (square) return true;\n          if (getValueAtSquare(rank, emptyFile, threatenedSquares)) return true;\n          return false;\n        }).reduce((a, b) =>  (a || b) ? true : false );\n        if (!castleIneligible) {\n          const castleDestination = rookFile<4 ? 2 : 6;\n          kingSpecialMoves.push([castleDestination, rank]);\n        }\n      }        \n    })\n    return kingSpecialMoves;\n  } else return [];\n}\n\nexport function getPawnSpecialMoves(rank, file, boardSetup, stateObj) {\n  // no need to check for offboard here; \n  // capture and doublestep moves restrict to board space\n  // enpassant capture already restricted in state setter\n  let validMoves = [];\n  const currentPiece = boardSetup[rank][file];\n  if (currentPiece.pieceType==='pawn') {\n    const negativeIfWhite = (currentPiece.pieceColor==='white') ? -1 : 1\n\n    /*CHECK FOR DIAGONAL CAPTURE*/\n    const captureCoordinates = pawnSpecialMoves\n      .diagonalCapture.map((move) => {\n        const newX = move[0]+file;\n        const newY = negativeIfWhite*move[1]+rank;\n        return [newX, newY];\n      });\n    /*if boardSetup's captureCoordinates do not contain enemies,\n    filter out capture coordinates*/\n    const eligibleCapture = captureCoordinates.filter((coord) => {\n      const colorAndPiece = getValueAtSquare(coord[1], coord[0], boardSetup)\n      return colorAndPiece && colorAndPiece.pieceColor!==currentPiece.pieceColor;\n    });\n    validMoves.push(...eligibleCapture);\n\n    /*CHECK FOR DOUBLESTEP*/\n    if (!currentPiece.hasMoved) {\n      /*  if pawn has not moved and no piece is two or one in front\n      add double advancement coordinates */ \n      const blocked = \n        getValueAtSquare(rank+negativeIfWhite*2, file, boardSetup) ||\n        getValueAtSquare(rank+negativeIfWhite*1, file, boardSetup);\n      if (!blocked) {\n        validMoves.push([file, rank+negativeIfWhite*2])\n      }\n    }\n    /*CHECK FOR EN PASSANT*/\n    if (stateObj.enPassantAvailableAt) {\n      const vulnerablePawnPosition = stateObj.enPassantAvailableAt\n      const enPassantMoves = getEnPassantThreats(vulnerablePawnPosition[1], vulnerablePawnPosition[0])\n      if (getValueAtSquare(rank,file,enPassantMoves)) {\n        validMoves.push([vulnerablePawnPosition[0],vulnerablePawnPosition[1]+negativeIfWhite])\n      }\n    }\n  }\n  return validMoves;\n}\n\nexport function updateOpponentKingMoves(boardSetup, threatenedSpaces, color) {\n  for (let rank=0; rank<8; rank++){\n    for (let file=0; file<8; file++){\n      let piece = getValueAtSquare(rank, file, boardSetup);\n      if (!piece) continue;\n      if (color===piece.pieceColor && piece.pieceType ==='king'){\n        boardSetup[rank][file].eligibleMovesList = piece.eligibleMovesList.filter((move) => {\n          return getValueAtSquare(move[1], move[0], threatenedSpaces)  ? false : true\n        });\n        return boardSetup\n      } else {\n        continue;\n      }\n    }\n  }\n}\n\nexport function getThreatsAgainstPlayer(boardSetup, color) {\n  var threatenedSpaces = [];\n  for (let rank=0; rank<8; rank++){\n    for (let file=0; file<8; file++){\n      try {\n        const piece = boardSetup[rank][file];\n        if (piece.pieceColor===color) continue;\n        if (piece.pieceType==='pawn' ) {\n          const negativeIfWhite = piece.pieceColor===\"white\" ? -1 : 1;\n          threatenedSpaces=threatenedSpaces\n            .concat([[file+1, rank+negativeIfWhite],[file-1, rank+negativeIfWhite]])\n        } else {\n          threatenedSpaces = threatenedSpaces.concat(piece.eligibleMovesList)\n        }\n      } catch {\n        continue;\n      }\n    }\n  }\n  return groupByRank(threatenedSpaces)\n}\n\nexport function updateBoardWithMoves(boardSetup, newStateObject={}) {\n  const copyBoardSetup = JSON.parse(JSON.stringify(boardSetup))\n  for (let rank=0; rank<8; rank++){\n    for (let file=0; file<8; file++){\n      try {\n        // find piece\n        let movesetList = getEligibleStandardMoves(rank, file, copyBoardSetup);\n        if (!movesetList) continue;\n\n        const currentPieceType = copyBoardSetup[rank][file].pieceType\n        if (currentPieceType === \"king\") {\n          movesetList = movesetList.concat(getKingSpecialMoves(rank, file, copyBoardSetup));\n        }\n        if (currentPieceType === \"pawn\") {\n          movesetList = movesetList.concat(getPawnSpecialMoves(rank, file, copyBoardSetup, newStateObject));\n        }\n        \n        copyBoardSetup[rank][file].eligibleMovesList = movesetList;\n      } catch {\n        continue;\n      }\n    }\n  }\n  return copyBoardSetup\n}\n\nexport function getUnthreatenedSpaces(coordinateArray, threatColor, threatSet) {\n  const filteredCoords = coordinateArray.filter((coordinate) => {\n    return !threatSet.includes(coordinate)\n  });\n  return filteredCoords\n}\n\nexport function getEligibleStandardMoves(squareRank, squareFile, boardSetup) {\n   // check if this square has a piece\n  const currentPiece = getValueAtSquare(squareRank, squareFile, boardSetup);\n  if (!currentPiece) return false;\n  const currentPosition = [squareFile, squareRank];\n  const piece = pieceAttributesByType[currentPiece.pieceType]\n  const unitMoves = piece.unitMoves;\n  const newCoordinates = unitMoves.map((deltaCoord) => {\n    const negativeIfWhite = currentPiece.pieceColor==='white' ? -1 : 1;  \n    return [(squareFile+negativeIfWhite*deltaCoord[0]), (squareRank+negativeIfWhite*deltaCoord[1])] \n  });\n  // first check for any directions that don't immediately go off-board\n  const eligibleUnitMoves = newCoordinates.filter((coord) => {\n    if (coord[0]<0 || coord[0]>7 || coord[1]<0 || coord[1]>7) return false;\n    // examine target square's occupants \n    const occupant = getValueAtSquare(coord[1], coord[0], boardSetup);\n    // return false if pawn is blocked\n    if (occupant && currentPiece.pieceType===\"pawn\") return false; \n    const occupantColor = occupant ? occupant.pieceColor : null;\n    return (occupantColor===currentPiece.pieceColor) ? false : true; // cannot capture own piece\n  })\n  // if piece does not have ultd range then return otherwise recurse with extendForUnlimitedRange \n  if (!piece.unlimitedRange) {\n    return eligibleUnitMoves;\n  } else {\n    // we use existing unit moves to extend range since all relevant pieces use straight line movement\n    if (eligibleUnitMoves.length===0) return [];\n    const eligibleDeltas = eligibleUnitMoves.map((coord)=> [coord[0]-squareFile, coord[1]-squareRank] );\n    const movesUnlimitedRange = eligibleDeltas.map((deltaCoord)=>{\n      return extendForUnlimitedRange(currentPiece, currentPosition, deltaCoord, boardSetup)\n    });\n    return movesUnlimitedRange.flat();\n  }\n}\n\nexport function extendForUnlimitedRange(piece, currentPosition, deltaMovement, boardSetup, eligibleMovesList=[]) {\n  const dx=deltaMovement[0];\n  const dy=deltaMovement[1];\n  const newCoord = [currentPosition[0]+dx, currentPosition[1]+dy]\n  // check if offBoard\n\n  const coordinateIsOffBoard = newCoord[0]<0 || newCoord[0]>7 || newCoord[1]<0 || newCoord[1]>7\n  if (coordinateIsOffBoard) {\n    return eligibleMovesList\n  }\n  // see if occupant exists in space \n  const occupant = getValueAtSquare(newCoord[1], newCoord[0], boardSetup);\n  const occupantColor = occupant ? occupant.pieceColor : null;\n  if (occupantColor===piece.pieceColor) {\n    return eligibleMovesList;\n  } else if (occupantColor && occupantColor!==piece.pieceColor) {\n    eligibleMovesList.push(newCoord);\n    return eligibleMovesList;\n  }\n  // if we get to this point we have an eligible coord\n  // push and recurse\n  eligibleMovesList.push(newCoord);\n  return extendForUnlimitedRange(piece, newCoord, deltaMovement, boardSetup, eligibleMovesList)\n}\n\nexport function searchForChecks(kingColor, kingPosition, boardSetup) {\n  // function checks if the current king is checked\n  const threatenedCoordinates = getThreatsAgainstPlayer(boardSetup, kingColor)\n  const kingThreatened = getValueAtSquare(kingPosition[1], kingPosition[0], threatenedCoordinates)\n  return kingThreatened ? true : false\n}\n\n\nexport function eligibleMovesExist(color, boardSetup, stateObj) {\n  /*\n  return true if even a single legal move exists (for checkmate and stalemate)\n  loop through each square\n  find eligible moves\n  for each eligible move, create a copy of the board, make the move, and look for a threat to king\n  if no threat, get out, return true\n  else continue\n  if loop through all, return false\n  */\n\n  for(let rank=0; rank<8; rank++) {\n    for(let file=0; file<8; file++) {\n      const piece = getValueAtSquare(rank, file, boardSetup);\n      if (!piece) {continue;}\n      if (piece.pieceColor===color) {\n        for (const coordinate of piece.eligibleMovesList) {\n          const targetFile = coordinate[0];\n          const targetRank = coordinate[1];\n          let copyBoardSetup = JSON.parse(JSON.stringify(boardSetup));\n          if (!copyBoardSetup[targetRank]){\n            copyBoardSetup[targetRank]={}\n          }\n          copyBoardSetup[targetRank][targetFile]=copyBoardSetup[rank][file];\n          copyBoardSetup[rank][file]=null;\n          let newStateObject = {};\n          newStateObject.enPassantAvailableAt = stateObj.enPassantAvailableAt;\n          newStateObject.whiteKingPosition = stateObj.whiteKingPosition;\n          newStateObject.blackKingPosition = stateObj.blackKingPosition;\n          newStateObject.check = stateObj.check;\n          const movingPiece = copyBoardSetup[targetRank][targetFile];\n          const originSquare = [rank, file];\n\n          copyBoardSetup = manageSpecialMoves(movingPiece, originSquare, coordinate, copyBoardSetup, newStateObject)\n\n          newStateObject = manageEnPassantState(movingPiece, originSquare, coordinate, newStateObject);\n          newStateObject = manageKingMove(movingPiece, coordinate, newStateObject);\n          let boardSetupUpdated = updateBoardWithMoves(copyBoardSetup, newStateObject);      \n          const checkStillExists = searchForChecks(color, newStateObject[color+'KingPosition'], boardSetupUpdated);\n          if (!checkStillExists) {\n            return true; \n          }\n        }\n      }\n    }\n  }\n  return false\n}\n\nexport function manageEnPassant(movingPiece, origin, target, boardSetup, newStateObject) {\n  if (movingPiece.pieceType==='pawn') {\n    if (newStateObject.enPassantAvailableAt[0]===target[0] && \n      newStateObject.enPassantAvailableAt[1]===origin[1]){\n        boardSetup[origin[1]][target[0]]=null;\n    }\n  }\n  return boardSetup\n}\n\nexport function manageCastle(movingPiece, origin, target, boardSetup) {\n  if (movingPiece.pieceType==='king') {\n    const spacesMoved = target[0]-origin[0];\n    const kingRank = target[1];\n    if ( Math.abs(spacesMoved)===2 ){\n      switch(spacesMoved<0) {\n        case true: // if queenside\n          if (!boardSetup[5]){\n            boardSetup[5]={}\n          }\n          console.log(\"castle queenside\")\n          boardSetup[kingRank][3] = boardSetup[kingRank][0]\n          boardSetup[kingRank][0] = null;\n          return boardSetup;\n        case false: // if kingside\n          if (!boardSetup[3]){\n            boardSetup[3]={}\n          }\n          console.log(\"castle kingside\")\n          boardSetup[kingRank][5] = boardSetup[kingRank][7]\n          boardSetup[kingRank][7] = null;\n          return boardSetup;\n        default: console.log('castle error')\n      }\n    }\n  }\n}\n\nexport function managePromotion(movingPiece, origin, target, boardSetup) {\n  if (movingPiece.pieceType==='pawn') {\n    if (target[1]===0 || target[1]===7) {\n      // if a pawn reaches the last rank on either side, promote\n      boardSetup[target[1]][target[0]].pieceType = 'queen';\n    }\n  }\n  return boardSetup\n}\n\nexport function manageKingMove(movingPiece, target, newStateObject) {\n  if (movingPiece.pieceType==='king') {\n    if (movingPiece.pieceColor==='black') {\n      newStateObject.blackKingPosition = [target[0], target[1]];\n    } else {\n      newStateObject.whiteKingPosition = [target[0], target[1]];\n    }\n  }\n  return newStateObject;\n}\n\nexport function manageSpecialMoves(movingPiece, origin, target, boardSetup, newStateObject) {\n  const updateBoard1 = manageEnPassant(movingPiece, origin, target, boardSetup, newStateObject);\n  const updateBoard2 = manageCastle(movingPiece, origin, target, boardSetup);\n  return managePromotion(movingPiece, origin, target, updateBoard1);\n}\n\nexport function manageEnPassantState(movingPiece, origin, target, newStateObject) {\n  if (movingPiece.pieceType==='pawn' && Math.abs(target[1]-origin[1])===2) {\n    newStateObject.enPassantAvailableAt = target;\n  } else {\n    newStateObject.enPassantAvailableAt = [null, null];\n  }\n  return newStateObject\n}\n\n/*\n  CONSTANTS\n*/\n\nexport const chess_unicode = {\n  white: {king: '\\u2654',\n    queen: '\\u2655',\n    rook: '\\u2656',\n    bishop: '\\u2657',\n    knight: '\\u2658',\n    pawn: '\\u2659'\n  },\n  black: {king: '\\u265A',\n    queen: '\\u265B',\n    rook: '\\u265C',\n    bishop: '\\u265D',\n    knight: '\\u265E',\n    pawn: '\\u265F'\n  }\n}\n\nexport const pieceAttributes = {\n  // moves in form of [dx, dy]\n  king: {\n    unlimitedRange: false,\n    unitMoves: [[0,1],[0,-1],[-1,0],[1,0],[1,1],[-1,-1],[-1,1],[1,-1]],\n  },\n  queen: {\n    unlimitedRange: true,\n    unitMoves: [[0,1],[0,-1],[-1,0],[1,0],[1,1],[-1,-1],[-1,1],[1,-1]],\n  },\n  rook: {\n    unlimitedRange: true,\n    unitMoves: [[0,1],[0,-1],[-1,0],[1,0]],\n  },\n  bishop: {\n    unlimitedRange: true,\n    unitMoves: [[1,1],[-1,-1],[-1,1],[1,-1]],\n  },\n  knight: {\n    unlimitedRange: false,\n    unitMoves: [[1,2],[-1,-2],[1,-2],[-1,2],[2,1],[-2,-1],[2,-1],[-2,1]],\n  },\n  pawn: {\n    unlimitedRange: false,\n    unitMoves: [[0,1]],\n  }\n}\n\nexport const pieceAttributesByType = {\n  'king': pieceAttributes.king,\n  'queen': pieceAttributes.queen,\n  'rook': pieceAttributes.rook,\n  'bishop': pieceAttributes.bishop,\n  'knight': pieceAttributes.knight,\n  'pawn': pieceAttributes.pawn,\n}\n\nexport const defaultSetupWhite = {\n  // Hash by ranks white POV\n  // Nest by file\n  0: { \n    0:{pieceColor: 'black', pieceType: 'rook', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'black', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'black', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'black', pieceType: 'queen', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'black', pieceType: 'king', eligibleMovesList: [], hasMoved:false,},\n    5:{pieceColor: 'black', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'black', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'black', pieceType: 'rook', eligibleMovesList: [], hasMoved:false} \n  }, 1: { \n    0:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    5:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false} \n  }, 6: { \n    0:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    5:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false} \n  }, 7: { \n    0:{pieceColor: 'white', pieceType: 'rook', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'white', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'white', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'white', pieceType: 'queen', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'white', pieceType: 'king', eligibleMovesList: [], hasMoved:false,},\n    5:{pieceColor: 'white', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'white', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'white', pieceType: 'rook', eligibleMovesList: [], hasMoved:false} \n  }\n}\nexport const defaultSetupBlack = {\n  // Hash by ranks black POV\n  0: { \n    0:{pieceColor: 'white', pieceType: 'rook', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'white', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'white', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'white', pieceType: 'queen', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'white', pieceType: 'king', eligibleMovesList: [], hasMoved:false,},\n    5:{pieceColor: 'white', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'white', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'white', pieceType: 'rook', eligibleMovesList: [], hasMoved:false} \n  }, 1: { \n    0:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    5:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false} \n  }, 6: { \n    0:{pieceColor: 'black', pieceType: 'rook', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'black', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'black', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'black', pieceType: 'queen', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'black', pieceType: 'king', eligibleMovesList: [], hasMoved:false,},\n    5:{pieceColor: 'black', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'black', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'black', pieceType: 'rook', eligibleMovesList: [], hasMoved:false} \n  }, 7: { \n    0:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    5:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false} \n  }\n}\n\nexport const pawnSpecialMoves = {\n  diagonalCapture:[[-1,1],[1,1]],\n  // doubleStep added without this object\n}\nexport const kingSpecialMoves = {\n  queensideCastle:[[-2,0]],\n  kingsideCastle:[[2,0]]\n}\nexport const rookSpecialMoves = {\n  queensideCastle:[[2,0]],\n  kingsideCastle:[[-2,0]]\n}","import React, {Component} from 'react';\nimport './chess.css';\nimport * as chessHelpers from './chessHelpers.js'\n\nclass Chess extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNewGame = this.handleNewGame.bind(this);\n    this.handleLoadGame = this.handleLoadGame.bind(this);\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n    const topPlayerIsBlack = true;\n    this.state = {\n      boardSetup: topPlayerIsBlack ? chessHelpers.defaultSetupWhite : chessHelpers.defaultSetupBlack, /*an array of coordinate-piece objects*/\n      highlightedSquares: {}, \n      hotSquare: null, /*coordinate of the square that's toggled on and prepped for a move*/\n      playerTurn: \"white\",\n      check: false,\n      enPassantAvailableAt: [null, null],\n      threatenedSpaces: [],\n      whiteKingPosition: topPlayerIsBlack ? [4,7] : [4,0],\n      blackKingPosition: topPlayerIsBlack ? [4,0] : [4,7],\n      jumbotronMessage: \"WHITE's Move\"\n    }\n  }\n\n  componentDidMount() {\n    // saveAllPossibleMoves\n    const copyBoardSetup = JSON.parse(JSON.stringify(this.state.boardSetup))\n    const boardWithMoves = chessHelpers.updateBoardWithMoves(copyBoardSetup, {})\n    this.setState({\n      boardSetup: boardWithMoves,\n    });\n  }\n\n  handleNewGame() {\n  }\n\n  handleLoadGame() {\n  }\n\n  handleSquareClick(props) {\n    if (!this.state.hotSquare){\n      // if a square has not been focused, focus it \n      const square = chessHelpers.getValueAtSquare(props.coordinate[1], props.coordinate[0], this.state.boardSetup);\n      if (square) {\n        this.setState((state) => ({\n        highlightedSquares: square.pieceColor === props.playerTurn ? chessHelpers.groupByRank(square.eligibleMovesList) : {},\n        hotSquare: props.coordinate\n      }))}\n    } else {\n      // otherwise we execute the move\n      this.executeMove(this.state.boardSetup, this.state.highlightedSquares, props.coordinate, this.state.hotSquare )\n      this.setState((state) => ({\n        highlightedSquares: {},\n        hotSquare: null\n      }))\n    }\n  }\n  \n  executeMove(boardSetup, highlightedSquares, targetSquare, hotSquare) {\n    const currentPlayer = this.state.playerTurn;\n    const originRank = hotSquare[1];\n    const originFile = hotSquare[0];\n    const valueOrigin = chessHelpers.getValueAtSquare(originRank, originFile, boardSetup);\n    if (!valueOrigin) return false;\n    if (valueOrigin.pieceColor!==currentPlayer) return false; \n    const targetRank = targetSquare[1];\n    const targetFile = targetSquare[0];\n    const opponent = currentPlayer===\"white\"? \"black\" : \"white\";\n\n    if (chessHelpers.getValueAtSquare(targetRank, targetFile, highlightedSquares)) {\n      /*access boardSetup, pull the item from the hotSquare, overwrite boardSetup at the keys*/\n      let copyBoardSetup = JSON.parse(JSON.stringify(boardSetup))\n\n      // move piece from origin to target. set the hasMoved property to true\n      copyBoardSetup[originRank][originFile].hasMoved=true\n      // make sure key exists\n      if (!copyBoardSetup[targetRank]){\n        copyBoardSetup[targetRank]={}\n      }\n      copyBoardSetup[targetRank][targetFile]=copyBoardSetup[originRank][originFile];\n      copyBoardSetup[originRank][originFile]=null;\n\n      // resolveboard\n      let newStateObject = {};\n      newStateObject.enPassantAvailableAt = this.state.enPassantAvailableAt;\n      newStateObject.whiteKingPosition = this.state.whiteKingPosition;\n      newStateObject.blackKingPosition = this.state.blackKingPosition;\n      const movingPiece = copyBoardSetup[targetRank][targetFile]\n\n      copyBoardSetup = chessHelpers.manageSpecialMoves(movingPiece, hotSquare, targetSquare, copyBoardSetup, newStateObject)\n      newStateObject = chessHelpers.manageEnPassantState(movingPiece, hotSquare, targetSquare, newStateObject);\n      newStateObject = chessHelpers.manageKingMove(movingPiece, targetSquare, newStateObject);\n      let boardSetupUpdated = chessHelpers.updateBoardWithMoves(copyBoardSetup, newStateObject);      \n\n      //  Resolve board and look for any to player's king\n      // make sure player did not move into check\n      let playerKingPosition = currentPlayer+\"KingPosition\";\n      const playerIsChecked = \n        chessHelpers.searchForChecks(currentPlayer, newStateObject[playerKingPosition], boardSetupUpdated);\n      if (this.state.check && playerIsChecked) {\n        alert('You are checked!')\n        return;\n      } else if (playerIsChecked) {\n        alert('You cannot move into check!')\n        return;\n      };\n\n      newStateObject.jumbotronMessage = `${opponent.toUpperCase()}'s Move`\n\n      // see if a check has occurred against opponent\n      const opponentKingPosition = opponent+\"KingPosition\";\n      const threatenedSpaces = chessHelpers.getThreatsAgainstPlayer(boardSetupUpdated, opponent);\n      boardSetupUpdated = chessHelpers.updateOpponentKingMoves(boardSetupUpdated, threatenedSpaces, opponent)\n      \n\n      const legalMovesExist = chessHelpers.eligibleMovesExist(opponent, boardSetupUpdated, newStateObject)\n      const checkedKingExists = chessHelpers.searchForChecks(opponent, newStateObject[opponentKingPosition], boardSetupUpdated);\n      if (checkedKingExists && !legalMovesExist) {\n        alert(`${opponent.toUpperCase()} has been checkmated!`);\n        newStateObject.jumbotronMessage = `${opponent.toUpperCase()} has been checkmated!`\n      } else if (!legalMovesExist) {\n        alert(`Game ends in a stalemate!`);\n        newStateObject.jumbotronMessage = `Game ends in a stalemate!`\n      } else if (checkedKingExists) {\n        newStateObject.check = true;\n        alert(`${opponent.toUpperCase()} is checked!`);\n        newStateObject.jumbotronMessage = newStateObject.jumbotronMessage+\"-(in check)\"\n      } else {\n        newStateObject.check = false;\n      }\n\n      // look for a checkmate\n      // look for a stalemate\n      \n\n      // set state if all has passed\n      this.setState({\n        boardSetup: boardSetupUpdated,\n        playerTurn: opponent,\n        threatenedSpaces: threatenedSpaces,\n        ...newStateObject\n      });\n    } else {\n      return\n    }\n  }\n\n  render() {\n    return this.state && <div >\n      <Jumbotron \n        jumbotronMessage={this.state.jumbotronMessage}\n      ></Jumbotron>\n      <Board className=\"board\"\n        handleSquareClick={this.handleSquareClick}\n        {...this.state}\n      ></Board>\n    </div>\n  }\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSquare = this.renderSquare.bind(this);\n  }\n\n  renderSquare(squareId, rank, file, piece) {\n    return <Square \n      key={squareId}\n      color={(rank%2+squareId%2\n        /*this plus one for rotating board*/\n        +1 )%2===0 ? \"black\" : \"white\"}\n      highlighted={chessHelpers.getValueAtSquare(rank, file, this.props.highlightedSquares)}\n      coordinate={[file,rank]}\n      symbol = {this.getPieceSymbol(piece)}\n      {...this.props}\n      // {...this.getPieceAttributes(piece)}\n    ></Square>\n  }\n\n  getPieceAttributes(currentChesspiece) {\n    try {\n      return chessHelpers.pieceAttributes[currentChesspiece.pieceType]\n    } catch {\n      return {}\n    }\n  }\n  getPieceSymbol(currentChesspiece) {\n    const pieceColor = currentChesspiece ? currentChesspiece.pieceColor : null;\n    const pieceType = currentChesspiece ? currentChesspiece.pieceType : null;\n    try {\n      return chessHelpers.chess_unicode[pieceColor][pieceType]\n    } catch {\n      return null\n    }\n  }\n\n  getHighlightedStatus(highlightedSquares, rank, file) {\n    try {\n      return highlightedSquares[rank][file] ? true : false\n    } catch {\n      return false\n    }\n  }\n\n  render() {\n    const boardSetup = this.props.boardSetup;\n    const boardRows = Array(8).fill(1).map((_, i) => i);\n    const boardCols = Array(8).fill(1).map((_, i) => i);\n    return boardSetup && <div>\n      {\n        boardRows.map((row) => {\n          return <div className=\"boardRow\" key={row}>\n            {\n              boardCols.map((column) => {\n                const rank = row;\n                const file = column;\n                const squareId = row*8+file;\n                const piece=chessHelpers.getValueAtSquare(rank, file, boardSetup);\n                return this.renderSquare(squareId, rank, file, piece)\n              })\n            }\n          </div>\n        \n        })\n      }\n    </div>\n  }\n}\n\nclass Square extends Component {\n  render() {\n    const highlighted = this.props.highlighted\n    return <button \n      onClick={() => this.props.handleSquareClick(this.props)}\n      className={`${this.props.color} ${highlighted ? 'highlighted' : ''} square `}>\n        {this.props.symbol && <div>{this.props.symbol}</div>}\n    </button>\n  }\n}\n\nclass Jumbotron extends Component {\n\n  render() {\n    return <div>\n      <h2>{this.props.jumbotronMessage}</h2>\n    </div>\n  }\n}\n\nexport default Chess;","import React from 'react';\nimport './App.css';\nimport Chess from './Chess.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chess></Chess>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}