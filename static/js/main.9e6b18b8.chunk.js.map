{"version":3,"sources":["chessHelpers.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["groupByRank","moveArray","reduce","acc","obj","rank","getValueAtSquare","file","board","error","getKingSpecialMoves","boardSetup","currentPiece","pieceType","hasMoved","emptyFilesRequired","0","7","kingSpecialMoves","threatenedSquares","getThreatsAgainstPlayer","pieceColor","forEach","rookFile","map","emptyFile","a","b","castleDestination","push","getPawnSpecialMoves","stateObj","validMoves","directionalConstant","eligibleCapture","pawnSpecialMoves","diagonalCapture","move","filter","coord","colorAndPiece","enPassantAvailableAt","vulnerablePawnPosition","enPassantMoves","eligible","getEnPassantThreats","color","threatenedSpaces","piece","concat","eligibleMovesList","updateBoardWithMoves","newStateObject","copyBoardSetup","JSON","parse","stringify","movesetList","getEligibleStandardMoves","currentPieceType","squareRank","squareFile","currentPosition","pieceAttributesByType","eligibleUnitMoves","unitMoves","deltaCoord","occupant","unlimitedRange","length","extendForUnlimitedRange","deltaMovement","dx","dy","newCoord","occupantColor","flat","searchForChecks","kingColor","kingPosition","threatenedCoordinates","manageKingMove","movingPiece","target","blackKingPosition","whiteKingPosition","manageSpecialMoves","origin","updateBoard1","manageEnPassant","spacesMoved","kingRank","Math","abs","console","log","manageCastle","managePromotion","manageEnPassantState","chess_unicode","white","king","queen","rook","bishop","knight","pawn","black","pieceAttributes","defaultState","lastMove","history","blackOnTop","1","2","3","4","5","6","highlightedSquares","hotSquare","playerTurn","check","jumbotronMessage","fileCoordinates","Game","props","handleNewGame","bind","handleLoadGame","handleSquareClick","handleHistoryClick","state","chessHelpers","boardWithMoves","this","setState","index","executeMove","coordinate","square","targetSquare","currentPlayer","originRank","originFile","valueOrigin","targetRank","targetFile","opponent","boardSetupUpdated","playerIsChecked","alert","toUpperCase","opponentKingPosition","legalMovesExist","originSquare","checkedKingExists","Jumbotron","fluid","Container","Row","Col","className","xs","md","Component","Board","renderSquare","squareId","key","highlighted","symbol","getPieceSymbol","currentChesspiece","boardRows","boardCols","rows","reverse","columns","boardDisplay","letter","row","column","Array","fill","_","i","buildBoard","Square","onClick","PlayerMove","History","ListGroup","Item","action","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e6b18b8.chunk.js","sourcesContent":["\nexport function groupByRank(moveArray) {\n    return moveArray.reduce(function (acc, obj) {\n      let rank = obj[1];\n      if (!acc[rank]) {\n        acc[rank] = {};\n      }\n      acc[rank][obj[0]] = true;\n      return acc;\n    }, {});\n  }\n\nexport function getValueAtSquare(rank, file, board) {\n  try {\n    return board[rank][file]\n  } \n  catch(error) {\n    return null;\n  }\n}\n\nexport function getEnPassantThreats(rank, file) {\n    if (rank===null || file===null) return {};\n    const eligible = [];\n    if (file-1>=0) {\n      eligible.push([file-1, rank]);\n    }\n    if (file+1<8) {\n      eligible.push([file+1, rank]);\n    }\n    return groupByRank(eligible)\n  }\n\nexport function getKingSpecialMoves(rank, file, boardSetup) {\n  const currentPiece = boardSetup[rank][file];\n  if (currentPiece.pieceType==='king' && !currentPiece.hasMoved) {\n    const emptyFilesRequired = {\n      0: [1,2,3],\n      7: [5,6]\n    };\n    const kingSpecialMoves = [];\n    const defaultRookFiles = [0, 7];\n    const threatenedSquares = getThreatsAgainstPlayer(boardSetup, currentPiece.pieceColor);\n\n    // cannot castle while in check\n    if (getValueAtSquare(rank, file, threatenedSquares)) return [];\n\n    // check if spaces are empty or in check\n    defaultRookFiles.forEach((rookFile) => {\n      const potentialRook = getValueAtSquare(rank, rookFile, boardSetup);\n\n      // check if the piece hasMoved\n      if (!potentialRook.hasMoved) {\n        const castleIneligible = emptyFilesRequired[rookFile].map((emptyFile) => {\n          const square = getValueAtSquare(rank, emptyFile, boardSetup);\n          if (square) return true;\n          if (getValueAtSquare(rank, emptyFile, threatenedSquares)) return true;\n          return false;\n        }).reduce((a, b) =>  (a || b) ? true : false );\n        if (!castleIneligible) {\n          const castleDestination = rookFile<4 ? 2 : 6;\n          kingSpecialMoves.push([castleDestination, rank]);\n        }\n      }        \n    })\n    return kingSpecialMoves;\n  } else return [];\n}\n\nexport function getPawnSpecialMoves(rank, file, boardSetup, stateObj) {\n  // no need to check for offboard here; \n  // capture and doublestep moves restrict to board space\n  // enpassant capture already restricted in state setter\n  let validMoves = [];\n  const currentPiece = boardSetup[rank][file];\n  if (currentPiece.pieceType==='pawn') {\n    const directionalConstant = (currentPiece.pieceColor==='black') ? -1 : 1\n\n    /*CHECK FOR DIAGONAL CAPTURE*/\n    const captureCoordinates = pawnSpecialMoves\n      .diagonalCapture.map((move) => {\n        const newX = move[0]+file;\n        const newY = directionalConstant*move[1]+rank;\n        return [newX, newY];\n      });\n    /*if boardSetup's captureCoordinates do not contain enemies,\n    filter out capture coordinates*/\n    const eligibleCapture = captureCoordinates.filter((coord) => {\n      const colorAndPiece = getValueAtSquare(coord[1], coord[0], boardSetup)\n      return colorAndPiece && colorAndPiece.pieceColor!==currentPiece.pieceColor;\n    });\n    validMoves.push(...eligibleCapture);\n\n    /*CHECK FOR DOUBLESTEP*/\n    if (!currentPiece.hasMoved) {\n      /*  if pawn has not moved and no piece is two or one in front\n      add double advancement coordinates */ \n      const blocked = \n        getValueAtSquare(rank+directionalConstant*2, file, boardSetup) ||\n        getValueAtSquare(rank+directionalConstant*1, file, boardSetup);\n      if (!blocked) {\n        validMoves.push([file, rank+directionalConstant*2])\n      }\n    }\n    /*CHECK FOR EN PASSANT*/\n    if (stateObj.enPassantAvailableAt) {\n      const vulnerablePawnPosition = stateObj.enPassantAvailableAt\n      const enPassantMoves = getEnPassantThreats(vulnerablePawnPosition[1], vulnerablePawnPosition[0])\n      if (getValueAtSquare(rank,file,enPassantMoves)) {\n        validMoves.push([vulnerablePawnPosition[0],vulnerablePawnPosition[1]+directionalConstant])\n      }\n    }\n  }\n  return validMoves;\n}\n\nexport function updateOpponentKingMoves(boardSetup, threatenedSpaces, color) {\n  for (let rank=0; rank<8; rank++){\n    for (let file=0; file<8; file++){\n      let piece = getValueAtSquare(rank, file, boardSetup);\n      if (!piece) continue;\n      if (color===piece.pieceColor && piece.pieceType ==='king'){\n        boardSetup[rank][file].eligibleMovesList = piece.eligibleMovesList.filter((move) => {\n          return getValueAtSquare(move[1], move[0], threatenedSpaces)  ? false : true\n        });\n        return boardSetup\n      } else {\n        continue;\n      }\n    }\n  }\n}\n\nexport function getThreatsAgainstPlayer(boardSetup, color) {\n  var threatenedSpaces = [];\n  for (let rank=0; rank<8; rank++){\n    for (let file=0; file<8; file++){\n      try {\n        const piece = boardSetup[rank][file];\n        if (piece.pieceColor===color) continue;\n        if (piece.pieceType==='pawn' ) {\n          const directionalConstant = piece.pieceColor===\"black\" ? -1 : 1;\n          threatenedSpaces=threatenedSpaces\n            .concat([[file+1, rank+directionalConstant],[file-1, rank+directionalConstant]])\n        } else {\n          threatenedSpaces = threatenedSpaces.concat(piece.eligibleMovesList)\n        }\n      } catch {\n        continue;\n      }\n    }\n  }\n  return groupByRank(threatenedSpaces)\n}\n\nexport function updateBoardWithMoves(boardSetup, newStateObject={}) {\n  const copyBoardSetup = JSON.parse(JSON.stringify(boardSetup))\n  for (let rank=0; rank<8; rank++){\n    for (let file=0; file<8; file++){\n      try {\n        // find piece\n        let movesetList = getEligibleStandardMoves(rank, file, copyBoardSetup);\n        if (!movesetList) continue;\n\n        const currentPieceType = copyBoardSetup[rank][file].pieceType\n        if (currentPieceType === \"king\") {\n          movesetList = movesetList.concat(getKingSpecialMoves(rank, file, copyBoardSetup));\n        }\n        if (currentPieceType === \"pawn\") {\n          movesetList = movesetList.concat(getPawnSpecialMoves(rank, file, copyBoardSetup, newStateObject));\n        }\n        \n        copyBoardSetup[rank][file].eligibleMovesList = movesetList;\n      } catch {\n        continue;\n      }\n    }\n  }\n  return copyBoardSetup\n}\n\nexport function getUnthreatenedSpaces(coordinateArray, threatColor, threatSet) {\n  const filteredCoords = coordinateArray.filter((coordinate) => {\n    return !threatSet.includes(coordinate)\n  });\n  return filteredCoords\n}\n\nexport function getEligibleStandardMoves(squareRank, squareFile, boardSetup) {\n   // check if this square has a piece\n  const currentPiece = getValueAtSquare(squareRank, squareFile, boardSetup);\n  if (!currentPiece) return false;\n  const currentPosition = [squareFile, squareRank];\n  const piece = pieceAttributesByType[currentPiece.pieceType]\n  const unitMoves = piece.unitMoves;\n  const newCoordinates = unitMoves.map((deltaCoord) => {\n    const directionalConstant = currentPiece.pieceColor==='black' ? -1 : 1;  \n    return [(squareFile+directionalConstant*deltaCoord[0]), (squareRank+directionalConstant*deltaCoord[1])] \n  });\n  // first check for any directions that don't immediately go off-board\n  const eligibleUnitMoves = newCoordinates.filter((coord) => {\n    if (coord[0]<0 || coord[0]>7 || coord[1]<0 || coord[1]>7) return false;\n    // examine target square's occupants \n    const occupant = getValueAtSquare(coord[1], coord[0], boardSetup);\n    // return false if pawn is blocked\n    if (occupant && currentPiece.pieceType===\"pawn\") return false; \n    const occupantColor = occupant ? occupant.pieceColor : null;\n    return (occupantColor===currentPiece.pieceColor) ? false : true; // cannot capture own piece\n  })\n  // if piece does not have ultd range then return otherwise recurse with extendForUnlimitedRange \n  if (!piece.unlimitedRange) {\n    return eligibleUnitMoves;\n  } else {\n    // we use existing unit moves to extend range since all relevant pieces use straight line movement\n    if (eligibleUnitMoves.length===0) return [];\n    const eligibleDeltas = eligibleUnitMoves.map((coord)=> [coord[0]-squareFile, coord[1]-squareRank] );\n    const movesUnlimitedRange = eligibleDeltas.map((deltaCoord)=>{\n      return extendForUnlimitedRange(currentPiece, currentPosition, deltaCoord, boardSetup)\n    });\n    return movesUnlimitedRange.flat();\n  }\n}\n\nexport function extendForUnlimitedRange(piece, currentPosition, deltaMovement, boardSetup, eligibleMovesList=[]) {\n  const dx=deltaMovement[0];\n  const dy=deltaMovement[1];\n  const newCoord = [currentPosition[0]+dx, currentPosition[1]+dy]\n  // check if offBoard\n\n  const coordinateIsOffBoard = newCoord[0]<0 || newCoord[0]>7 || newCoord[1]<0 || newCoord[1]>7\n  if (coordinateIsOffBoard) {\n    return eligibleMovesList\n  }\n  // see if occupant exists in space \n  const occupant = getValueAtSquare(newCoord[1], newCoord[0], boardSetup);\n  const occupantColor = occupant ? occupant.pieceColor : null;\n  if (occupantColor===piece.pieceColor) {\n    return eligibleMovesList;\n  } else if (occupantColor && occupantColor!==piece.pieceColor) {\n    eligibleMovesList.push(newCoord);\n    return eligibleMovesList;\n  }\n  // if we get to this point we have an eligible coord\n  // push and recurse\n  eligibleMovesList.push(newCoord);\n  return extendForUnlimitedRange(piece, newCoord, deltaMovement, boardSetup, eligibleMovesList)\n}\n\nexport function searchForChecks(kingColor, kingPosition, boardSetup) {\n  // function checks if the current king is checked\n  const threatenedCoordinates = getThreatsAgainstPlayer(boardSetup, kingColor)\n  const kingThreatened = getValueAtSquare(kingPosition[1], kingPosition[0], threatenedCoordinates)\n  return kingThreatened ? true : false\n}\n\n\nexport function eligibleMovesExist(color, boardSetup, stateObj) {\n  /*\n  return true if even a single legal move exists (for checkmate and stalemate)\n  loop through each square\n  find eligible moves\n  for each eligible move, create a copy of the board, make the move, and look for a threat to king\n  if no threat, get out, return true\n  else continue\n  if loop through all, return false\n  */\n\n  for(let rank=0; rank<8; rank++) {\n    for(let file=0; file<8; file++) {\n      const piece = getValueAtSquare(rank, file, boardSetup);\n      if (!piece) {continue;}\n      if (piece.pieceColor===color) {\n        for (const coordinate of piece.eligibleMovesList) {\n          const targetFile = coordinate[0];\n          const targetRank = coordinate[1];\n          let copyBoardSetup = JSON.parse(JSON.stringify(boardSetup));\n          if (!copyBoardSetup[targetRank]){\n            copyBoardSetup[targetRank]={}\n          }\n          copyBoardSetup[targetRank][targetFile]=copyBoardSetup[rank][file];\n          copyBoardSetup[rank][file]=null;\n          let newStateObject = {};\n          newStateObject.enPassantAvailableAt = stateObj.enPassantAvailableAt;\n          newStateObject.whiteKingPosition = stateObj.whiteKingPosition;\n          newStateObject.blackKingPosition = stateObj.blackKingPosition;\n          newStateObject.check = stateObj.check;\n          const movingPiece = copyBoardSetup[targetRank][targetFile];\n          const originSquare = [rank, file];\n\n          copyBoardSetup = manageSpecialMoves(movingPiece, originSquare, coordinate, copyBoardSetup, newStateObject)\n\n          newStateObject = manageEnPassantState(movingPiece, originSquare, coordinate, newStateObject);\n          newStateObject = manageKingMove(movingPiece, coordinate, newStateObject);\n          let boardSetupUpdated = updateBoardWithMoves(copyBoardSetup, newStateObject);      \n          const checkStillExists = searchForChecks(color, newStateObject[color+'KingPosition'], boardSetupUpdated);\n          if (!checkStillExists) {\n            return true; \n          }\n        }\n      }\n    }\n  }\n  return false\n}\n\nexport function manageEnPassant(movingPiece, origin, target, boardSetup, newStateObject) {\n  if (movingPiece.pieceType==='pawn') {\n    if (newStateObject.enPassantAvailableAt[0]===target[0] && \n      newStateObject.enPassantAvailableAt[1]===origin[1]){\n        boardSetup[origin[1]][target[0]]=null;\n    }\n  }\n  return boardSetup\n}\n\nexport function manageCastle(movingPiece, origin, target, boardSetup) {\n  if (movingPiece.pieceType==='king') {\n    const spacesMoved = target[0]-origin[0];\n    const kingRank = target[1];\n    if ( Math.abs(spacesMoved)===2 ){\n      switch(spacesMoved<0) {\n        case true: // if queenside\n          if (!boardSetup[5]){\n            boardSetup[5]={}\n          }\n          boardSetup[kingRank][3] = boardSetup[kingRank][0]\n          boardSetup[kingRank][0] = null;\n          return boardSetup;\n        case false: // if kingside\n          if (!boardSetup[3]){\n            boardSetup[3]={}\n          }\n          boardSetup[kingRank][5] = boardSetup[kingRank][7]\n          boardSetup[kingRank][7] = null;\n          return boardSetup;\n        default: console.log('castle error')\n      }\n    }\n  }\n}\n\nexport function managePromotion(movingPiece, origin, target, boardSetup) {\n  if (movingPiece.pieceType==='pawn') {\n    if (target[1]===0 || target[1]===7) {\n      // if a pawn reaches the last rank on either side, promote\n      boardSetup[target[1]][target[0]].pieceType = 'queen';\n    }\n  }\n  return boardSetup\n}\n\nexport function manageKingMove(movingPiece, target, newStateObject) {\n  if (movingPiece.pieceType==='king') {\n    if (movingPiece.pieceColor==='black') {\n      newStateObject.blackKingPosition = [target[0], target[1]];\n    } else {\n      newStateObject.whiteKingPosition = [target[0], target[1]];\n    }\n  }\n  return newStateObject;\n}\n\nexport function manageSpecialMoves(movingPiece, origin, target, boardSetup, newStateObject) {\n  const updateBoard1 = manageEnPassant(movingPiece, origin, target, boardSetup, newStateObject);\n  const updateBoard2 = manageCastle(movingPiece, origin, target, boardSetup);\n  return managePromotion(movingPiece, origin, target, updateBoard1);\n}\n\nexport function manageEnPassantState(movingPiece, origin, target, newStateObject) {\n  if (movingPiece.pieceType==='pawn' && Math.abs(target[1]-origin[1])===2) {\n    newStateObject.enPassantAvailableAt = target;\n  } else {\n    newStateObject.enPassantAvailableAt = [null, null];\n  }\n  return newStateObject\n}\n\n/*\n  CONSTANTS\n*/\n\nexport const chess_unicode = {\n  white: {king: '\\u2654',\n    queen: '\\u2655',\n    rook: '\\u2656',\n    bishop: '\\u2657',\n    knight: '\\u2658',\n    pawn: '\\u2659'\n  },\n  black: {king: '\\u265A',\n    queen: '\\u265B',\n    rook: '\\u265C',\n    bishop: '\\u265D',\n    knight: '\\u265E',\n    pawn: '\\u265F'\n  }\n}\n\nexport const pieceAttributes = {\n  // moves in form of [dx, dy]\n  king: {\n    unlimitedRange: false,\n    unitMoves: [[0,1],[0,-1],[-1,0],[1,0],[1,1],[-1,-1],[-1,1],[1,-1]],\n  },\n  queen: {\n    unlimitedRange: true,\n    unitMoves: [[0,1],[0,-1],[-1,0],[1,0],[1,1],[-1,-1],[-1,1],[1,-1]],\n  },\n  rook: {\n    unlimitedRange: true,\n    unitMoves: [[0,1],[0,-1],[-1,0],[1,0]],\n  },\n  bishop: {\n    unlimitedRange: true,\n    unitMoves: [[1,1],[-1,-1],[-1,1],[1,-1]],\n  },\n  knight: {\n    unlimitedRange: false,\n    unitMoves: [[1,2],[-1,-2],[1,-2],[-1,2],[2,1],[-2,-1],[2,-1],[-2,1]],\n  },\n  pawn: {\n    unlimitedRange: false,\n    unitMoves: [[0,1]],\n  }\n}\n\nexport const pieceAttributesByType = {\n  'king': pieceAttributes.king,\n  'queen': pieceAttributes.queen,\n  'rook': pieceAttributes.rook,\n  'bishop': pieceAttributes.bishop,\n  'knight': pieceAttributes.knight,\n  'pawn': pieceAttributes.pawn,\n}\n\nexport const defaultSetupWhite = {\n  // Hash by ranks white POV\n  // Nest by file\n  0: { \n    0:{pieceColor: 'white', pieceType: 'rook', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'white', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'white', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'white', pieceType: 'queen', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'white', pieceType: 'king', eligibleMovesList: [], hasMoved:false,},\n    5:{pieceColor: 'white', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'white', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'white', pieceType: 'rook', eligibleMovesList: [], hasMoved:false} \n  }, 1: { \n    0:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    5:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'white', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false} \n  }, 6: { \n    0:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    5:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'black', pieceType: 'pawn', eligibleMovesList: [], hasMoved:false} \n  }, 7: { \n    0:{pieceColor: 'black', pieceType: 'rook', eligibleMovesList: [], hasMoved:false},\n    1:{pieceColor: 'black', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    2:{pieceColor: 'black', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    3:{pieceColor: 'black', pieceType: 'queen', eligibleMovesList: [], hasMoved:false},\n    4:{pieceColor: 'black', pieceType: 'king', eligibleMovesList: [], hasMoved:false,},\n    5:{pieceColor: 'black', pieceType: 'bishop', eligibleMovesList: [], hasMoved:false},\n    6:{pieceColor: 'black', pieceType: 'knight', eligibleMovesList: [], hasMoved:false},\n    7:{pieceColor: 'black', pieceType: 'rook', eligibleMovesList: [], hasMoved:false} \n  }\n}\nexport const pawnSpecialMoves = {\n  diagonalCapture:[[-1,1],[1,1]],\n  // doubleStep added without this object\n}\nexport const kingSpecialMoves = {\n  queensideCastle:[[-2,0]],\n  kingsideCastle:[[2,0]]\n}\nexport const rookSpecialMoves = {\n  queensideCastle:[[2,0]],\n  kingsideCastle:[[-2,0]]\n}\n\nexport const defaultState = {\n      lastMove: \"New Game\",\n      history: [],\n      blackOnTop: true,\n      boardSetup: defaultSetupWhite, /*an array of coordinate-piece objects*/\n      highlightedSquares: {}, \n      hotSquare: null, /*coordinate of the square that's toggled on and prepped for a move*/\n      playerTurn: \"white\",\n      check: false,\n      enPassantAvailableAt: [null, null],\n      threatenedSpaces: [],\n      whiteKingPosition: [4,0], \n      blackKingPosition: [4,7], \n      jumbotronMessage: \"WHITE's Move\"\n    }\n\nexport const fileCoordinates = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\"]","import React, {Component} from 'react';\nimport './chess.css';\nimport * as chessHelpers from './chessHelpers.js'\nimport Button from 'react-bootstrap/Button';\nimport {Jumbotron, ListGroup, Container, Row, Col} from 'react-bootstrap';\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNewGame = this.handleNewGame.bind(this);\n    this.handleLoadGame = this.handleLoadGame.bind(this);\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n    this.handleHistoryClick = this.handleHistoryClick.bind(this);\n    this.state = chessHelpers.defaultState\n  }\n  componentDidMount() {\n    // saveAllPossibleMoves\n    const copyBoardSetup = JSON.parse(JSON.stringify(this.state.boardSetup))\n    const boardWithMoves = chessHelpers.updateBoardWithMoves(copyBoardSetup, {})\n    this.setState({\n      boardSetup: boardWithMoves,\n    });\n  }\n\n  handleNewGame() {\n  }\n\n  handleLoadGame() {\n  }\n\n  handleHistoryClick(props, index) {\n    if (index===0) {\n      this.setState(chessHelpers.defaultState);\n    } else {\n      this.setState(props.history[index]);\n    }\n  }\n\n  handleSquareClick(props) {\n    console.log(this.state)\n    if (!this.state.hotSquare){\n      // if a square has not been focused, focus it \n      const square = chessHelpers.getValueAtSquare(props.coordinate[1], props.coordinate[0], this.state.boardSetup);\n      if (square) {\n        this.setState((state) => ({\n        highlightedSquares: square.pieceColor === props.playerTurn ? chessHelpers.groupByRank(square.eligibleMovesList) : {},\n        hotSquare: props.coordinate\n      }))}\n    } else {\n      // otherwise we execute the move\n      this.executeMove(this.state.boardSetup, this.state.highlightedSquares, props.coordinate, this.state.hotSquare )\n      this.setState((state) => ({\n        highlightedSquares: {},\n        hotSquare: null\n      }))\n    }\n  }\n  \n  executeMove(boardSetup, highlightedSquares, targetSquare, hotSquare) {\n    const currentPlayer = this.state.playerTurn;\n    const originRank = hotSquare[1];\n    const originFile = hotSquare[0];\n    const valueOrigin = chessHelpers.getValueAtSquare(originRank, originFile, boardSetup);\n    if (!valueOrigin) return false;\n    if (valueOrigin.pieceColor!==currentPlayer) return false; \n    const targetRank = targetSquare[1];\n    const targetFile = targetSquare[0];\n    const opponent = currentPlayer===\"white\"? \"black\" : \"white\";\n\n    if (chessHelpers.getValueAtSquare(targetRank, targetFile, highlightedSquares)) {\n      /*access boardSetup, pull the item from the hotSquare, overwrite boardSetup at the keys*/\n      let copyBoardSetup = JSON.parse(JSON.stringify(boardSetup))\n\n      // move piece from origin to target. set the hasMoved property to true\n      copyBoardSetup[originRank][originFile].hasMoved=true\n      // make sure key exists\n      if (!copyBoardSetup[targetRank]){\n        copyBoardSetup[targetRank]={}\n      }\n      copyBoardSetup[targetRank][targetFile]=copyBoardSetup[originRank][originFile];\n      copyBoardSetup[originRank][originFile]=null;\n\n      // resolveboard\n      let newStateObject = {};\n      newStateObject.enPassantAvailableAt = this.state.enPassantAvailableAt;\n      newStateObject.whiteKingPosition = this.state.whiteKingPosition;\n      newStateObject.blackKingPosition = this.state.blackKingPosition;\n      const movingPiece = copyBoardSetup[targetRank][targetFile]\n      newStateObject.lastMove = `${movingPiece.pieceColor}: ${movingPiece.pieceType} to ${chessHelpers.fileCoordinates[targetSquare[0]]}${targetSquare[1]+1}`;\n\n      copyBoardSetup = chessHelpers.manageSpecialMoves(movingPiece, hotSquare, targetSquare, copyBoardSetup, newStateObject)\n      newStateObject = chessHelpers.manageEnPassantState(movingPiece, hotSquare, targetSquare, newStateObject);\n      newStateObject = chessHelpers.manageKingMove(movingPiece, targetSquare, newStateObject);\n      let boardSetupUpdated = chessHelpers.updateBoardWithMoves(copyBoardSetup, newStateObject);      \n\n      //  Resolve board and look for any to player's king\n      // make sure player did not move into check\n      let playerKingPosition = currentPlayer+\"KingPosition\";\n      const playerIsChecked = \n        chessHelpers.searchForChecks(currentPlayer, newStateObject[playerKingPosition], boardSetupUpdated);\n      if (this.state.check && playerIsChecked) {\n        alert('You will still be in check!')\n        return;\n      } else if (playerIsChecked) {\n        alert('You cannot move into check!')\n        return;\n      };\n\n      newStateObject.jumbotronMessage = `${opponent.toUpperCase()}'s Move`\n\n      // see if a check has occurred against opponent\n      const opponentKingPosition = opponent+\"KingPosition\";\n      const threatenedSpaces = chessHelpers.getThreatsAgainstPlayer(boardSetupUpdated, opponent);\n      boardSetupUpdated = chessHelpers.updateOpponentKingMoves(boardSetupUpdated, threatenedSpaces, opponent)\n      \n\n      // look for a checkmate\n      // look for a stalemate\n      const legalMovesExist = chessHelpers.eligibleMovesExist(opponent, boardSetupUpdated, newStateObject)\n      const checkedKingExists = chessHelpers.searchForChecks(opponent, newStateObject[opponentKingPosition], boardSetupUpdated);\n      if (checkedKingExists && !legalMovesExist) {\n        alert(`${opponent.toUpperCase()} has been checkmated!`);\n        newStateObject.jumbotronMessage = `${opponent.toUpperCase()} has been checkmated!`\n      } else if (!legalMovesExist) {\n        alert(`Game ends in a stalemate!`);\n        newStateObject.jumbotronMessage = `Game ends in a stalemate!`\n      } else if (checkedKingExists) {\n        newStateObject.check = true;\n        alert(`${opponent.toUpperCase()} is checked!`);\n        newStateObject.jumbotronMessage = newStateObject.jumbotronMessage+\"-(in check)\"\n      } else {\n        newStateObject.check = false;\n      }\n      \n\n      // set state if all has passed\n      this.setState({\n        history: this.state.history.concat(this.state),\n        boardSetup: boardSetupUpdated,\n        playerTurn: opponent,\n        threatenedSpaces: threatenedSpaces,\n        ...newStateObject\n      });\n    } else {\n      return\n    }\n  }\n\n  render() {\n    return this.state && \n    <div>\n      <Jumbotron fluid >\n        <h1>Chess</h1>\n      </Jumbotron>\n      <br/>\n      <Container>\n        <Row>\n        </Row>\n        <Row>\n          <PlayerMove \n            jumbotronMessage={this.state.jumbotronMessage}\n          ></PlayerMove>\n        </Row>\n        <Row>\n          <Col className=\"chessboard\" xs={12} md={8}>\n              <Board className=\"board\"\n                handleSquareClick={this.handleSquareClick}\n                {...this.state}\n              ></Board>\n            </Col>\n            <Col className=\"moveHistory\" xs={6} md={4}>\n              <History\n                handleHistoryClick={this.handleHistoryClick}\n                lastMove={this.state.lastMove}\n                history={this.state.history}\n              ></History>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  }\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSquare = this.renderSquare.bind(this);\n  }\n\n  renderSquare(squareId, rank, file, piece) {\n    return <Square \n      key={squareId}\n      color={(rank%2+squareId%2\n        /*this plus one for rotating board*/\n        )%2===0 ? \"black\" : \"white\"}\n      highlighted={chessHelpers.getValueAtSquare(rank, file, this.props.highlightedSquares)}\n      coordinate={[file,rank]}\n      symbol = {this.getPieceSymbol(piece)}\n      {...this.props}\n      // {...this.getPieceAttributes(piece)}\n    ></Square>\n  }\n\n  \n  getPieceSymbol(currentChesspiece) {\n    const pieceColor = currentChesspiece ? currentChesspiece.pieceColor : null;\n    const pieceType = currentChesspiece ? currentChesspiece.pieceType : null;\n    try {\n      return chessHelpers.chess_unicode[pieceColor][pieceType]\n    } catch {\n      return null\n    }\n  }\n\n  buildBoard(boardSetup, blackOnTop, boardRows, boardCols) {\n    const rows = blackOnTop ? [...boardRows].reverse() : boardRows;\n    const columns = blackOnTop ? boardCols : [...boardCols].reverse();\n    if (boardSetup) {\n      const boardDisplay = <div>\n        <div className=\"boardRow\">\n          {chessHelpers.fileCoordinates.map((letter) =>  \n          <label className=\"fileLabel\">{letter}</label>)}\n        </div>\n        {rows.map((row, index) => {\n                  return <div className=\"boardRow\" key={row}>  \n                    <span>{row+1}</span>\n                    {\n                      columns.map((column) => {\n                        const rank = row;\n                        const file = column;\n                        const squareId = row*8+file;\n                        const piece=chessHelpers.getValueAtSquare(rank, file, boardSetup);\n                        return this.renderSquare(squareId, rank, file, piece)\n                      })\n                    }\n                  </div>\n                })}\n      </div>\n      return <div>{boardDisplay}</div>\n    }\n  }\n\n  render() {\n    const boardSetup = this.props.boardSetup;\n    const blackOnTop = this.props.blackOnTop;\n    const boardRows = Array(8).fill(1).map((_, i) => i);\n    const boardCols = Array(8).fill(1).map((_, i) => i);\n    return this.buildBoard(boardSetup, blackOnTop, boardRows, boardCols);\n  }\n}\n\nclass Square extends Component {\n  render() {\n    const highlighted = this.props.highlighted\n    return <button \n      onClick={() => this.props.handleSquareClick(this.props)}\n      className={`${this.props.color} ${highlighted ? 'highlighted' : ''} square `}>\n        {this.props.symbol && <div>{this.props.symbol}</div>}\n    </button>\n  }\n}\n\nclass PlayerMove extends Component {\n  render() {\n    return <div>\n      <h5>{this.props.jumbotronMessage}</h5>\n    </div>\n  }\n}\n\nclass History extends Component {\n  render() {\n    return <ListGroup>\n      Move History\n      {this.props.history && this.props.history.map((move, i) => {\n        return <ListGroup.Item action\n          key = {i}\n          onClick={() => this.props.handleHistoryClick(this.props, i)}\n          variant='dark'\n          className='move'>\n          {move.lastMove}\n        </ListGroup.Item>\n      })}\n      <ListGroup.Item \n        variant='dark'\n        className='move'>{this.props.lastMove}</ListGroup.Item>\n    </ListGroup>\n  }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Game.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}